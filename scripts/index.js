const moment = require("moment");
const { ethers } = require("hardhat");
const { formatEther } = ethers.utils;

async function deployErc20Contract(signer, totalSupply) {
  const bytecode =
    "0x608060405234801561001057600080fd5b506040516103bc3803806103bc83398101604081905261002f9161007c565b60405181815233906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a333600090815260208190526040902055610094565b60006020828403121561008d578081fd5b5051919050565b610319806100a36000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063313ce5671461005157806370a082311461006557806395d89b411461009c578063a9059cbb146100c5575b600080fd5b604051601281526020015b60405180910390f35b61008e610073366004610201565b6001600160a01b031660009081526020819052604090205490565b60405190815260200161005c565b604080518082018252600781526626bcaa37b5b2b760c91b6020820152905161005c919061024b565b6100d86100d3366004610222565b6100e8565b604051901515815260200161005c565b3360009081526020819052604081205482111561014b5760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e7420746f6b656e2062616c616e6365000000000000604482015260640160405180910390fd5b336000908152602081905260408120805484929061016a9084906102b6565b90915550506001600160a01b0383166000908152602081905260408120805484929061019790849061029e565b90915550506040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b80356001600160a01b03811681146101fc57600080fd5b919050565b600060208284031215610212578081fd5b61021b826101e5565b9392505050565b60008060408385031215610234578081fd5b61023d836101e5565b946020939093013593505050565b6000602080835283518082850152825b818110156102775785810183015185820160400152820161025b565b818111156102885783604083870101525b50601f01601f1916929092016040019392505050565b600082198211156102b1576102b16102cd565b500190565b6000828210156102c8576102c86102cd565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d80384ce584e101c5b92e4ee9b7871262285070dbcd2d71f99601f0f4fcecd2364736f6c63430008040033";

  // A Human-Readable ABI; we only need to specify relevant fragments,
  // in the case of deployment this means the constructor
  const abi = [
    "constructor(uint totalSupply)",

    // Read-Only Functions
    "function balanceOf(address owner) view returns (uint256)",
    "function decimals() view returns (uint8)",
    "function symbol() view returns (string)",

    // Authenticated Functions
    "function transfer(address to, uint amount) returns (bool)",

    // Events
    "event Transfer(address indexed from, address indexed to, uint amount)",
  ];

  const factory = new ethers.ContractFactory(abi, bytecode, signer);

  // Deploy, setting total supply to 100 tokens (assigned to the deployer)
  const erc20Contract = await factory.deploy(totalSupply);

  // Wait until the contract has been deployed before interacting
  // with it; returns the receipt for the deployemnt transaction
  await erc20Contract.deployTransaction.wait();
  return erc20Contract;
}

async function deployDBVestingContract(
  signer,
  beneficiaryAddress,
  startTimestamp,
  durationSeconds
) {
  const bytecode =
    "0x60e0604052600280546001600160401b034216600160a01b026001600160e01b031990911617731d827461bec8bc392e38d48357e065dfcec23553179055600380546001600160401b031916610e1017905534801561005d57600080fd5b506002546003546001600160a01b038216916001600160401b03600160a01b90910481169116826100e75760405162461bcd60e51b815260206004820152602a60248201527f56657374696e6757616c6c65743a2062656e6566696369617279206973207a65604482015269726f206164647265737360b01b606482015260840160405180910390fd5b606083901b6001600160601b03191660805260c082811b6001600160c01b031990811660a05282821b1690526001600160a01b03909216916001600160401b039182169116610ae061016d6000396000818160d80152818161032b0152610380015260006102e30152600081816101420152818161029501526104750152610ae06000f3fe60806040526004361061008a5760003560e01c8063810ec23b11610059578063810ec23b1461016c57806386d1a69f1461018c57806396132521146101a15780639852595c146101b6578063be9a6555146101d657600080fd5b80630a17b06b146100965780630fb5a6b4146100c9578063191655871461010657806338af3eed1461012857600080fd5b3661009157005b600080fd5b3480156100a257600080fd5b506100b66100b136600461098d565b6101eb565b6040519081526020015b60405180910390f35b3480156100d557600080fd5b507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166100b6565b34801561011257600080fd5b50610126610121366004610909565b61020f565b005b34801561013457600080fd5b506040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020016100c0565b34801561017857600080fd5b506100b6610187366004610923565b61021b565b34801561019857600080fd5b5061012661022e565b3480156101ad57600080fd5b506000546100b6565b3480156101c257600080fd5b506100b66101d1366004610909565b6102ba565b3480156101e257600080fd5b506100b66102d8565b60006102096101f960005490565b61020390476109f6565b83610306565b92915050565b610218816103e0565b50565b6000610227838361049e565b9392505050565b6000805461023b426101eb565b6102459190610a4d565b90508060008082825461025891906109f6565b90915550506040518181527fda9d4e5f101b8b9b1c5b76d0c5a9f7923571acfc02376aa076b75a8c080c956b9060200160405180910390a16102187f00000000000000000000000000000000000000000000000000000000000000008261052d565b6001600160a01b038116600090815260016020526040812054610209565b67ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690565b60006103106102d8565b8267ffffffffffffffff16101561032957506000610209565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1661035c6102d8565b61036691906109f6565b8267ffffffffffffffff16111561037e575081610209565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166103b16102d8565b6103c59067ffffffffffffffff8516610a4d565b6103cf9085610a2e565b6103d99190610a0e565b9050610209565b60006103eb826102ba565b6103f5834261021b565b6103ff9190610a4d565b6001600160a01b03831660009081526001602052604081208054929350839290919061042c9084906109f6565b90915550506040518181526001600160a01b038316907fc0e523490dd523c33b1878c9eb14ff46991e3f5b2cd33710918618f2a39cba1b9060200160405180910390a261049a827f000000000000000000000000000000000000000000000000000000000000000083610650565b5050565b60006102276104ac846102ba565b6040516370a0823160e01b81523060048201526001600160a01b038616906370a082319060240160206040518083038186803b1580156104eb57600080fd5b505afa1580156104ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105239190610975565b61020391906109f6565b804710156105825760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146105cf576040519150601f19603f3d011682016040523d82523d6000602084013e6105d4565b606091505b505090508061064b5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610579565b505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261064b928692916000916106e091851690849061075d565b80519091501561064b57808060200190518101906106fe9190610955565b61064b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610579565b606061076c8484600085610774565b949350505050565b6060824710156107d55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610579565b843b6108235760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610579565b600080866001600160a01b0316858760405161083f91906109a7565b60006040518083038185875af1925050503d806000811461087c576040519150601f19603f3d011682016040523d82523d6000602084013e610881565b606091505b509150915061089182828661089c565b979650505050505050565b606083156108ab575081610227565b8251156108bb5782518084602001fd5b8160405162461bcd60e51b815260040161057991906109c3565b80356001600160a01b03811681146108ec57600080fd5b919050565b803567ffffffffffffffff811681146108ec57600080fd5b60006020828403121561091a578081fd5b610227826108d5565b60008060408385031215610935578081fd5b61093e836108d5565b915061094c602084016108f1565b90509250929050565b600060208284031215610966578081fd5b81518015158114610227578182fd5b600060208284031215610986578081fd5b5051919050565b60006020828403121561099e578081fd5b610227826108f1565b600082516109b9818460208701610a64565b9190910192915050565b60208152600082518060208401526109e2816040850160208701610a64565b601f01601f19169190910160400192915050565b60008219821115610a0957610a09610a94565b500190565b600082610a2957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610a4857610a48610a94565b500290565b600082821015610a5f57610a5f610a94565b500390565b60005b83811015610a7f578181015183820152602001610a67565b83811115610a8e576000848401525b50505050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220ef7752096bcbab82c823eb951e0a08f53084fbac2fffb6854b28452a19a346de64736f6c63430008040033";

  const abi = [
    "constructor(address beneficiaryAddress, uint64 startTimestamp, uint64 durationSeconds)",
    "function vestedAmount(address token, uint64 timestamp) public view returns (uint256)",
  ];

  const factory = new ethers.ContractFactory(abi, bytecode, signer);
  const contract = await factory.deploy(
    beneficiaryAddress,
    startTimestamp,
    durationSeconds
  );
  console.log("BDVestingContract deployed to:", contract.address);

  await contract.deployTransaction.wait();
  return contract;
}

function createSigner() {
  const url = "http://localhost:8545";
  const provider = new ethers.providers.JsonRpcProvider(url);
  const signer = provider.getSigner();
  return signer;
}

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function main() {
  const signer = createSigner();

  const erc20TotalSupply = 100000;
  const beneficiaryAddress = await signer.getAddress();
  const startMoment = moment();
  const startTimestamp = Math.ceil(Date.now() / 1000);
  const durationSeconds = 900;
  const [erc20, vesting] = await Promise.all([
    deployErc20Contract(signer, erc20TotalSupply),
    deployDBVestingContract(
      signer,
      beneficiaryAddress,
      startTimestamp,
      durationSeconds
    ),
  ]);

  const transferAmount = erc20TotalSupply;
  await erc20.transfer(vesting.address, transferAmount);

  const allocationTimestamp = Math.ceil(
    startMoment.add(450, "s").toDate().getTime() / 1000
  );

  const expectedTotalAllocation = transferAmount;
  const expectedVested =
    (expectedTotalAllocation * (allocationTimestamp - startTimestamp)) /
    durationSeconds;

  console.log("totalAllocation", expectedTotalAllocation);
  console.log("timestamp - start()", allocationTimestamp - startTimestamp);
  console.log("durationSeconds", durationSeconds);
  console.log("expectedVested", expectedVested);

  // await sleep(3000)

  const vested = await vesting.vestedAmount(erc20.address, allocationTimestamp);
  console.log("Vested", vested.toString());
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
