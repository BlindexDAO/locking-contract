const moment = require("moment");
const { ethers } = require("hardhat");
const { deployErc20Contract } = require("./erc20");
const { formatEther } = ethers.utils;
const {
  abi,
  bytecode,
} = require("../artifacts/contracts/BDLockingContract.sol/BDLockingContract.json");

async function deployDBLockingContract(
  signer,
  beneficiaryAddress,
  startTimestamp,
  durationSeconds,
  cliffDurationSeconds
) {
  const bytecode =
    "0x6101006040523480156200001257600080fd5b5060405162000f7138038062000f718339810160408190526200003591620002aa565b8383836001600160a01b038316620000a75760405162461bcd60e51b815260206004820152602a60248201527f56657374696e6757616c6c65743a2062656e6566696369617279206973207a65604482015269726f206164647265737360b01b60648201526084015b60405180910390fd5b60609290921b6001600160601b03191660805260c090811b6001600160c01b031990811660a05291811b90911690526001600160401b03828116908216106200016b5760405162461bcd60e51b815260206004820152604960248201527f546865206475726174696f6e206f662074686520636c69666620706572696f6460448201527f206d75737420656e64206265666f72652074686520656e74697265206c6f636b6064820152681d5c081c195c9a5bd960ba1b608482015260a4016200009e565b6303c26700826001600160401b031610620001ef5760405162461bcd60e51b815260206004820152603860248201527f546865206475726174696f6e206f6620746865206c6f636b696e67207065726960448201527f6f642063616e6f6f74206578636565642032207965617273000000000000000060648201526084016200009e565b620001ff426301e1338062000312565b836001600160401b03161115620002735760405162461bcd60e51b815260206004820152603160248201527f546865206c6f636b696e6720706572696f64206d7573742073746172742077696044820152707468696e203336352066726f6d206e6f7760781b60648201526084016200009e565b60c01b6001600160c01b03191660e0525062000337915050565b80516001600160401b0381168114620002a557600080fd5b919050565b60008060008060808587031215620002c0578384fd5b84516001600160a01b0381168114620002d7578485fd5b9350620002e7602086016200028d565b9250620002f7604086016200028d565b915062000307606086016200028d565b905092959194509250565b600082198211156200033257634e487b7160e01b81526011600452602481fd5b500190565b60805160601c60a05160c01c60c05160c01c60e05160c01c610bd26200039f60003960008181610246015261067101526000818160ee015281816106c8015261071d015260006104af0152600081816101580152818161033b01526104700152610bd26000f3fe6080604052600436106100a05760003560e01c806386d1a69f1161006457806386d1a69f146101a25780638ff8fe50146101b757806396132521146101d75780639852595c146101ec578063be9a655514610222578063d85349f71461023757600080fd5b80630a17b06b146100ac5780630fb5a6b4146100df578063191655871461011c57806338af3eed1461013e578063810ec23b1461018257600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100cc6100c7366004610a7f565b610274565b6040519081526020015b60405180910390f35b3480156100eb57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166100cc565b34801561012857600080fd5b5061013c6101373660046109fb565b610298565b005b34801561014a57600080fd5b506040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020016100d6565b34801561018e57600080fd5b506100cc61019d366004610a15565b610364565b3480156101ae57600080fd5b5061013c610409565b3480156101c357600080fd5b506100cc6101d2366004610a15565b610498565b3480156101e357600080fd5b506000546100cc565b3480156101f857600080fd5b506100cc6102073660046109fb565b6001600160a01b031660009081526001602052604090205490565b34801561022e57600080fd5b506100cc6104a4565b34801561024357600080fd5b507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166100cc565b600061029261028260005490565b61028c9047610ae8565b836104d2565b92915050565b6001600160a01b0381166000908152600160205260408120546102bb8342610364565b6102c59190610b3f565b6001600160a01b0383166000908152600160205260408120805492935083929091906102f2908490610ae8565b90915550506040518181526001600160a01b038316907fc0e523490dd523c33b1878c9eb14ff46991e3f5b2cd33710918618f2a39cba1b9060200160405180910390a2610360827f0000000000000000000000000000000000000000000000000000000000000000836104de565b5050565b6001600160a01b038216600090815260016020526040812054610402906040516370a0823160e01b81523060048201526001600160a01b038616906370a082319060240160206040518083038186803b1580156103c057600080fd5b505afa1580156103d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f89190610a67565b61028c9190610ae8565b9392505050565b6000805461041642610274565b6104209190610b3f565b9050806000808282546104339190610ae8565b90915550506040518181527fda9d4e5f101b8b9b1c5b76d0c5a9f7923571acfc02376aa076b75a8c080c956b9060200160405180910390a16104957f000000000000000000000000000000000000000000000000000000000000000082610535565b50565b60006104028383610364565b67ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690565b60006104028383610653565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261053090849061077d565b505050565b8047101561058a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146105d7576040519150601f19603f3d011682016040523d82523d6000602084013e6105dc565b606091505b50509050806105305760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610581565b600061065d6104a4565b8267ffffffffffffffff1610806106b957507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166106a26104a4565b6106ac9190610ae8565b8267ffffffffffffffff16105b156106c657506000610292565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166106f96104a4565b6107039190610ae8565b8267ffffffffffffffff16111561071b575081610292565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1661074e6104a4565b6107629067ffffffffffffffff8516610b3f565b61076c9085610b20565b6107769190610b00565b9050610292565b60006107d2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661084f9092919063ffffffff16565b80519091501561053057808060200190518101906107f09190610a47565b6105305760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610581565b606061085e8484600085610866565b949350505050565b6060824710156108c75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610581565b843b6109155760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610581565b600080866001600160a01b031685876040516109319190610a99565b60006040518083038185875af1925050503d806000811461096e576040519150601f19603f3d011682016040523d82523d6000602084013e610973565b606091505b509150915061098382828661098e565b979650505050505050565b6060831561099d575081610402565b8251156109ad5782518084602001fd5b8160405162461bcd60e51b81526004016105819190610ab5565b80356001600160a01b03811681146109de57600080fd5b919050565b803567ffffffffffffffff811681146109de57600080fd5b600060208284031215610a0c578081fd5b610402826109c7565b60008060408385031215610a27578081fd5b610a30836109c7565b9150610a3e602084016109e3565b90509250929050565b600060208284031215610a58578081fd5b81518015158114610402578182fd5b600060208284031215610a78578081fd5b5051919050565b600060208284031215610a90578081fd5b610402826109e3565b60008251610aab818460208701610b56565b9190910192915050565b6020815260008251806020840152610ad4816040850160208701610b56565b601f01601f19169190910160400192915050565b60008219821115610afb57610afb610b86565b500190565b600082610b1b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610b3a57610b3a610b86565b500290565b600082821015610b5157610b51610b86565b500390565b60005b83811015610b71578181015183820152602001610b59565b83811115610b80576000848401525b50505050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212206b54ff3555ad03f05eddb543d7ba62d590e8119d71ef3d07a5dfddcda82931f764736f6c63430008040033";

  const abi = [
    "constructor(address beneficiaryAddress, uint64 startTimestamp, uint64 durationSeconds, uint64 cliffDurationSeconds)",
    "function freedAmount(address token, uint64 timestamp) public view returns (uint256)",
    "function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) public view returns (uint256)",
    "function _freeingSchedule(uint256 totalAllocation, uint64 timestamp) view returns (uint256)",
    "function start() public view returns (uint256)",
    "function duration() public view returns (uint256)",
    "function cliffDuration() public view returns (uint256)",
  ];
  const factory = new ethers.ContractFactory(abi, bytecode, signer);
  const contract = await factory.deploy(
    beneficiaryAddress,
    startTimestamp,
    durationSeconds,
    cliffDurationSeconds
  );
  console.log("BDLockingContract deployed to:", contract.address);

  await contract.deployTransaction.wait();
  return contract;
}

function createSigner() {
  const url = "http://localhost:8545";
  const provider = new ethers.providers.JsonRpcProvider(url);
  const signer = provider.getSigner();
  return signer;
}

async function main() {
  const signer = createSigner();

  const erc20TotalSupply = 100000;
  const beneficiaryAddress = await signer.getAddress();
  const startMoment = moment();
  const startTimestamp = Math.ceil(Date.now() / 1000);
  // const startTimestamp = Math.ceil(new Date().setFullYear(new Date().getFullYear() + 2) / 1000); // Test start not within 1 year
  // const durationSeconds = 60 * 60 * 24 * 365 * 3 + 1; // Test duration less than 2 years
  const durationSeconds = 900;
  const cliffDurationSeconds = 500;
  // const cliffDurationSeconds = durationSeconds + 1; // Test cliff larger than duration
  const [erc20, locking] = await Promise.all([
    deployErc20Contract(signer, erc20TotalSupply),
    deployDBLockingContract(
      signer,
      beneficiaryAddress,
      startTimestamp,
      durationSeconds,
      cliffDurationSeconds
    ),
  ]);

  const transferAmount = erc20TotalSupply;
  await erc20.transfer(locking.address, transferAmount);

  let allocationTimestamp = Math.ceil(
    startMoment.add(10, "s").toDate().getTime() / 1000
  );

  console.log("actual start", (await locking.start()).toString());
  console.log("expected durationSeconds", durationSeconds.toString());
  console.log("actual duration", (await locking.duration()).toString());
  console.log("expected cliff", cliffDurationSeconds);
  console.log("actual cliff", (await locking.cliffDuration()).toString());

  const expectedTotalAllocation = transferAmount;

  console.log("totalAllocation", expectedTotalAllocation);
  console.log("timestamp - start()", allocationTimestamp - startTimestamp);
  console.log("expected Freed", 0);

  let freed = await locking.freedAmount(erc20.address, allocationTimestamp);
  console.log("actual Freed", freed.toString());

  allocationTimestamp = Math.ceil(
    startMoment
      .add(cliffDurationSeconds + 10, "s")
      .toDate()
      .getTime() / 1000
  );
  const expectedFreed =
    (expectedTotalAllocation * (allocationTimestamp - startTimestamp)) /
    durationSeconds;

  console.log("timestamp - start()", allocationTimestamp - startTimestamp);
  console.log("expected Freed", expectedFreed);

  freed = await locking.freedAmount(erc20.address, allocationTimestamp);
  console.log("actual Freed", freed.toString());
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
